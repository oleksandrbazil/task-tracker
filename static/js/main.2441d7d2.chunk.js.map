{"version":3,"sources":["actions/tasks.js","reducers/tasks.js","actions/modal.js","reducers/modal.js","reducers/index.js","localStorage/index.js","sagas/index.js","store.js","components/Time/index.jsx","components/TaskTimer/index.jsx","components/TaskForm/index.jsx","components/TasksLog/index.jsx","utilities/buildData.js","components/TasksChart/index.jsx","components/TaskTabs/index.jsx","routes/HomePage/index.jsx","components/TaskNotFound/index.jsx","components/TaskInfo/index.jsx","routes/TaskPage/index.jsx","routes/index.js","theme/index.js","components/ModalMessage/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ADD_TASK","REMOVE_TASK","REMOVE_ALL_TASKS","UPDATE_CURRENT_TASK","FINISH_CURRENT_TASK","RESET_CURRENT_TASK","GENERATE_TASKS","updateCurrentTask","_ref","name","start","end","type","payload","finishTask","_ref2","callback","Date","valueOf","options","removeTask","_ref3","id","generateTasks","initialState","current","list","OPEN_MODAL","closeModal","isOpen","title","message","combineReducers","tasks","state","arguments","length","undefined","action","TYPES","_action$payload","_action$payload$start","_action$payload$name","_action$payload$end","Object","objectSpread","concat","task","filter","modal","saveState","serializedState","JSON","stringify","localStorage","setItem","e","saveStateToLocalStorage","addTask","actionWorker","rootSaga","getTasksStore","regenerator_default","a","wrap","_context","prev","next","select","sent","stop","_marked","_action$action","_args2","_context2","keys","forEach","key","Error","put","t0","_marked2","MIN_TASKS","MAX_TASKS","MIN_DURATION","MAX_DURATION","now","today","tomorrow","getRandomInt","numberOfTasks","i","finish","_context3","min","max","Math","floor","random","toLocaleDateString","setDate","getDate","setMinutes","getMinutes","delegateYield","_marked3","_context4","takeEvery","takeLatest","_marked4","_context5","all","_marked5","sagaMiddleware","createSagaMiddleware","preloadedState","getItem","parse","loadState","enhancers","devToolsExtension","window","__REDUX_DEVTOOLS_EXTENSION__","push","composedEnhancers","compose","apply","applyMiddleware","createStore","reducers","run","defaultDateTimeDiff","Time","datetime","datetimeDiff","secondDatetime","timeString","startDatetime","finishDatetime","moment","isValid","utc","diff","format","react_default","createElement","data-testid","defaultProps","TaskTimer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","setTimer","unsetTimer","nextProps","nextContext","_this2","setInterval","setState","getTime","clearInterval","_this$props","classes","className","root","components_Time","React","Component","withStyles","theme","height","width","borderRadius","display","justifyContent","alignItems","color","palette","primary","margin","fontSize","boxShadow","Index","preventDefault","renameTask","resetForm","target","value","_this3","_this$props2","onSubmit","handleOnSubmit","form","FormControl_default","Input_default","placeholder","onChange","handleOnChange","onBlur","handleOnBlur","components_TaskTimer","Button_default","textAlign","connect","dispatch","bindActionCreators","button","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","map","item","index","component","Link","to","onClick","BarItem","stackId","fill","toString","substr","TimeSlot","hours","set","minutes","seconds","milliseconds","intervals","taskId","millisecondsSpent","Number","toFixed","buildData","overlayMode","returnData","data","bars","startedAt","finishedAt","startHour","finishHour","spentHours","_loop","hour","targetHour","taskSlotName","slot","find","v","minute","second","spentMilliseconds","isOverlay","interval","b","addSpentTime","_ret","rebuildData","_buildData","_this$state","ref","rootEl","es6","strokeDasharray","dataKey","domain","legendType","style","float","FormControlLabel_default","control","Checkbox_default","checked","toggleOverlayMode","label","maxWidth","event","history","_this$props$history$l","location","tabRoutes","currentTab","pathname","hash","AppBar_default","position","Tabs_default","handleChangeTab","variant","Tab_default","fullWidth","TasksLog","TasksChart","withRouter","HomePage","TaskForm","TaskTabs","TaskNotFound","Typography_default","container","flexDirection","flexWrap","formControl","spacing","unit","ownProps","match","params","t","parseInt","TextField_default","disabled","FormLabel_default","InputLabelProps","shrink","TaskPage","react_router","exact","path","url","Task","routes","render","createMuiTheme","indigo","overrides","MuiInput","underline","MuiButton","text","backgroundColor","&:hover","MuiAppBar","cyan","MuiTableHead","MuiTableBody","MuiTableCell","typography","useNextVariants","top","left","transform","background","paper","shadows","padding","outline","closeButton","Modal_default","open","onClose","App","styles","Grid_default","justify","xs","ModalMessage","Boolean","hostname","ReactDOM","es","store","react_router_dom","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2441d7d2.chunk.js","sourcesContent":["//action types\nexport const ADD_TASK = 'tasks/ADD_TASK';\nexport const REMOVE_TASK = 'tasks/REMOVE_TASK';\nexport const REMOVE_ALL_TASKS = 'tasks/REMOVE_ALL_TASKS';\nexport const UPDATE_CURRENT_TASK = 'tasks/UPDATE_CURRENT_TASK';\nexport const FINISH_CURRENT_TASK = 'tasks/FINISH_CURRENT_TASK';\nexport const RESET_CURRENT_TASK = 'tasks/RESET_CURRENT_TASK';\n\nexport const GENERATE_TASKS = 'tasks/GENERATE_TASKS';\n\nexport const updateCurrentTask = ({ name, start, end }) => {\n  return {\n    type: UPDATE_CURRENT_TASK,\n    payload: {\n      start,\n      name,\n      end,\n    },\n  };\n};\n\nexport const finishTask = ({ callback }) => {\n  const end = new Date().valueOf();\n  return {\n    type: FINISH_CURRENT_TASK,\n    payload: {\n      end,\n    },\n    options: {\n      callback,\n    },\n  };\n};\n\nexport const removeTask = ({ id }) => ({\n  type: REMOVE_TASK,\n  payload: {\n    id,\n  },\n});\n\nexport const generateTasks = () => ({\n  type: GENERATE_TASKS,\n  payload: {},\n});\n","import * as TYPES from '../actions/tasks';\n\nconst initialState = {\n  current: {\n    name: '',\n    start: '',\n    end: '',\n  },\n  list: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case TYPES.UPDATE_CURRENT_TASK:\n      // Maybe it's not the right way, but this will reduce a few actions\n      // and make possible to simply generate new task\n      const {\n        start = state.current.start,\n        name = state.current.name,\n        end = state.current.end,\n      } = action.payload;\n\n      return {\n        ...state,\n        current: {\n          start,\n          name,\n          end,\n        },\n      };\n    case TYPES.FINISH_CURRENT_TASK:\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          end: action.payload.end,\n        },\n      };\n    case TYPES.RESET_CURRENT_TASK:\n      return {\n        ...state,\n        current: initialState.current,\n      };\n    case TYPES.ADD_TASK:\n      return {\n        ...state,\n        list: state.list.concat([action.payload.task]),\n      };\n    case TYPES.REMOVE_TASK:\n      return {\n        ...state,\n        list: state.list.filter(task => task.id !== action.payload.id),\n      };\n\n    case TYPES.REMOVE_ALL_TASKS:\n      return {\n        ...state,\n        list: [],\n      };\n    default:\n      return state;\n  }\n};\n","export const OPEN_MODAL = 'modal/OPEN_MODAL';\nexport const CLOSE_MODAL = 'modal/CLOSE_MODAL';\n\nexport const openModal = () => ({\n  type: OPEN_MODAL,\n  payload: {},\n});\nexport const closeModal = () => ({\n  type: CLOSE_MODAL,\n  payload: {\n    isOpen: false,\n  },\n});\n","import * as TYPES from '../actions/modal';\n\nconst initialState = {\n  isOpen: false,\n  title: '',\n  message: '',\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case TYPES.OPEN_MODAL:\n      return {\n        isOpen: true,\n        title: action.payload.title,\n        message: action.payload.message,\n      };\n    case TYPES.CLOSE_MODAL:\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport modal from './modal';\n\nexport default combineReducers({ tasks, modal });\n","/**\n * Try to load state from localStorage\n * Do nothing if user disabled localStorage\n * @returns {*}\n */\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\n/**\n * Try to save Redux store into localStorage.\n * This function doesn't cover case when user disabled localStorage\n * @param state\n */\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    // do something\n  }\n};\n","import { all, select, takeLatest, takeEvery, put } from 'redux-saga/effects';\nimport {\n  ADD_TASK,\n  REMOVE_TASK,\n  UPDATE_CURRENT_TASK,\n  FINISH_CURRENT_TASK,\n  RESET_CURRENT_TASK,\n  REMOVE_ALL_TASKS,\n  GENERATE_TASKS,\n} from '../actions/tasks';\nimport { OPEN_MODAL } from '../actions/modal';\nimport { saveState } from '../localStorage';\n\n// Selectors\nconst getTasksStore = state => state.tasks;\n\n// Workers\nfunction* saveStateToLocalStorage() {\n  const tasks = yield select(getTasksStore);\n  saveState({ tasks });\n}\n\nfunction* addTask(action = {}) {\n  const { list, current } = yield select(getTasksStore);\n\n  try {\n    // check if any key has empty value\n    Object.keys(current).forEach(key => {\n      if (!current[key]) {\n        let message;\n        if (key) {\n          message = `You are trying to finish task without ${key}, enter the title and try again`;\n        } else {\n          message = `You are trying to finish task without ${key}. `;\n        }\n        let e = new Error(message);\n        e.title = `Empty task ${key}`;\n        throw e;\n      }\n    });\n\n    // define task id depend on the last item in array\n    current.id = list.length > 0 ? list[list.length - 1].id + 1 : 1;\n\n    // Add currentTask to TaskList\n    yield put({\n      type: ADD_TASK,\n      payload: {\n        task: current,\n      },\n    });\n\n    // reset current task\n    yield put({\n      type: RESET_CURRENT_TASK,\n    });\n\n    // reset component state\n    const { action: { callback } = {} } = action;\n    if (typeof callback === 'function') {\n      callback();\n    }\n  } catch (e) {\n    yield put({\n      type: OPEN_MODAL,\n      payload: {\n        title: e.title || 'Error',\n        message: e.message,\n      },\n    });\n  }\n}\n\nfunction* generateTasks() {\n  const MIN_TASKS = 10; // items\n  const MAX_TASKS = 15; // items\n  const MIN_DURATION = 10; // minutes\n  const MAX_DURATION = 90; // minutes\n\n  const now = new Date();\n  const today = new Date(now.toLocaleDateString());\n  const tomorrow = new Date(new Date().setDate(today.getDate() + 1));\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  yield put({\n    type: REMOVE_ALL_TASKS,\n    payload: {},\n  });\n\n  const numberOfTasks = getRandomInt(MIN_TASKS, MAX_TASKS);\n\n  for (let i = 1; i < numberOfTasks; i++) {\n    const start = getRandomInt(today.valueOf(), tomorrow.valueOf());\n    const finish = new Date(start);\n    const name = `Random task #${i}`;\n    const end = getRandomInt(\n      finish.setMinutes(finish.getMinutes() + MIN_DURATION).valueOf(),\n      finish.setMinutes(finish.getMinutes() + MAX_DURATION).valueOf()\n    );\n\n    yield put({\n      type: UPDATE_CURRENT_TASK,\n      payload: {\n        start,\n        name,\n        end,\n      },\n    });\n\n    yield* addTask();\n  }\n}\n\n// Watchers\nfunction* actionWorker() {\n  yield takeEvery(FINISH_CURRENT_TASK, addTask);\n  yield takeEvery(GENERATE_TASKS, generateTasks);\n  // We have to trigger by RESET_CURRENT_TASK instead of ADD_TASK,\n  // cause it make possible saveState with empty currentTask\n  yield takeLatest(\n    [UPDATE_CURRENT_TASK, REMOVE_TASK, REMOVE_ALL_TASKS, RESET_CURRENT_TASK],\n    saveStateToLocalStorage\n  );\n}\n\nexport default function* rootSaga() {\n  yield all([actionWorker()]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\nimport { loadState } from './localStorage';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst preloadedState = loadState();\n\nconst enhancers = [];\nconst devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\nif (typeof devToolsExtension === 'function') {\n  enhancers.push(devToolsExtension());\n}\nconst composedEnhancers = compose(\n  applyMiddleware(sagaMiddleware),\n  ...enhancers\n);\n\nexport default createStore(reducers, preloadedState, composedEnhancers);\n\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport moment from 'moment';\n\nconst TIME_FORMAT = 'HH:mm:ss';\nexport const TIME_PLACEHOLDER = '00:00:00';\nexport const TIME_TEST_ID = 'time';\n\nconst defaultDateTimeDiff = {\n  start: '',\n  end: '',\n};\n\nconst Time = ({ datetime, secondDatetime, datetimeDiff }) => {\n  let timeString = TIME_PLACEHOLDER;\n\n  if (datetimeDiff && datetimeDiff !== defaultDateTimeDiff) {\n    // We have to calculate difference between two datetime and show time in required time format\n    const { start: startDatetime, end: finishDatetime } = datetimeDiff;\n    const start = moment(startDatetime);\n    const finish = moment(finishDatetime);\n    if (start.isValid() && finish.isValid()) {\n      timeString = moment.utc(finish.diff(start)).format(TIME_FORMAT);\n    }\n  } else if (datetime) {\n    // Show datetime in required time format\n    const start = moment(datetime);\n    if (start.isValid()) {\n      timeString = start.format(TIME_FORMAT);\n    }\n  }\n\n  return <span data-testid={TIME_TEST_ID}>{timeString}</span>;\n};\n\nTime.defaultProps = {\n  datetime: '',\n  datetimeDiff: defaultDateTimeDiff,\n};\n\nexport default Time;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Time from '../Time';\n\nconst initialState = {\n  end: '',\n};\n\nconst styles = theme => ({\n  root: {\n    height: '200px',\n    width: '200px',\n    borderRadius: '50%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: theme.palette.primary['900'],\n    margin: 20,\n    fontSize: 30,\n    boxShadow:\n      '0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12)',\n  },\n});\n\nclass TaskTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.timer = null;\n  }\n\n  componentDidMount() {\n    if (this.props.start) {\n      this.setTimer();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsetTimer();\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.start) {\n      this.setTimer();\n    } else {\n      this.unsetTimer();\n    }\n  }\n\n  setTimer() {\n    if (!this.timer) {\n      this.timer = setInterval(() => {\n        this.setState({ end: new Date().getTime() });\n      }, 1000);\n    }\n  }\n\n  unsetTimer() {\n    clearInterval(this.timer);\n    this.timer = null;\n    this.setState(initialState);\n  }\n\n  render() {\n    // We better to update just component state instead of updating each second Redux Store\n    // That's why we get 'start' when 'end' from state\n    const { classes, start } = this.props;\n    const { end } = this.state;\n    return (\n      <div className={classes.root}>\n        <Time datetimeDiff={{ start, end }} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(TaskTimer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { updateCurrentTask, finishTask } from '../../actions/tasks';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport TaskTimer from '../TaskTimer';\n\nconst initialState = {\n  name: '',\n};\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  form: {\n    textAlign: 'center',\n    margin: 20,\n  },\n});\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    const { name } = this.props;\n    this.state = {\n      ...initialState,\n      name,\n    };\n  }\n\n  handleOnSubmit(e) {\n    e.preventDefault();\n    const { start, finishTask, updateCurrentTask } = this.props;\n\n    // try to save task name anyway\n    this.renameTask();\n\n    // select required action\n    if (start) {\n      finishTask({ callback: () => this.resetForm() });\n    } else {\n      updateCurrentTask({ start: new Date().valueOf() });\n    }\n  }\n  resetForm() {\n    this.setState(initialState);\n  }\n\n  handleOnChange(e) {\n    // We could update right now currentTask in Redux Store,\n    // but this will lead to running LocalStorage.saveState() method with JSON.stringify.\n    // It's not a good idea because stringify is resource-intensive method\n    this.setState({ name: e.target.value });\n  }\n\n  handleOnBlur() {\n    this.renameTask();\n  }\n\n  renameTask() {\n    const { name } = this.state;\n    this.props.updateCurrentTask({ name });\n  }\n\n  render() {\n    const { name } = this.state;\n    const { start, classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <form onSubmit={e => this.handleOnSubmit(e)} className={classes.form}>\n          <FormControl>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              value={name}\n              placeholder=\"Name of your task\"\n              onChange={e => this.handleOnChange(e)}\n              onBlur={() => this.handleOnBlur()}\n            />\n          </FormControl>\n\n          <TaskTimer start={start} />\n\n          <Button type=\"submit\">{start ? 'Stop' : 'Start'}</Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  name: state.tasks.current.name,\n  start: state.tasks.current.start,\n});\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      finishTask,\n      updateCurrentTask,\n    },\n    dispatch\n  );\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Index)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { removeTask } from '../../actions/tasks';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Time from '../Time';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  button: {\n    margin: '10px',\n  },\n});\n\nconst Index = ({ list, removeTask, classes }) => {\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>№</TableCell>\n            <TableCell>Task</TableCell>\n            <TableCell>Time start</TableCell>\n            <TableCell>Time end</TableCell>\n            <TableCell>Time spend</TableCell>\n            <TableCell>Info</TableCell>\n            <TableCell>Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {list.map((item, index) => {\n            const { id, name, start, end } = item;\n            return (\n              <TableRow key={`row${index}`}>\n                <TableCell>{id}</TableCell>\n                <TableCell>{name}</TableCell>\n                <TableCell>\n                  <Time datetime={start} />\n                </TableCell>\n                <TableCell>\n                  <Time datetime={end} />\n                </TableCell>\n                <TableCell>\n                  <Time datetimeDiff={{ start, end }} />\n                </TableCell>\n                <TableCell>\n                  <Button component={Link} to={`/tasks/${id}`}>\n                    Info\n                  </Button>\n                </TableCell>\n                <TableCell>\n                  <Button\n                    className={classes.button}\n                    onClick={() => removeTask({ id })}\n                  >\n                    Delete\n                  </Button>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  list: state.tasks.list,\n});\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ removeTask }, dispatch);\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Index)\n);\n","import moment from 'moment';\n\nexport const HOURS_IN_DAY = 24;\nconst MILLISECONDS_IN_MINUTE = 60 * 1000;\n\nclass BarItem {\n  constructor({ id, stackId }) {\n    this.id = id;\n    this.stackId = stackId ? 'allInOne' : null;\n    this.fill = `#${Math.random()\n      .toString(16)\n      .substr(-6)}`;\n  }\n}\n\n// Use Class to make sure all props will be accessible and task spent time will be saved correctly\nclass TimeSlot {\n  constructor({ hours }) {\n    this.min = moment()\n      .utc()\n      .set({\n        hours,\n        minutes: 0,\n        seconds: 0,\n        milliseconds: 0,\n      });\n    this.max = moment()\n      .utc()\n      .set({\n        hours: hours + 1,\n        minutes: 0,\n        seconds: 0,\n        milliseconds: 0,\n      });\n    this.name = this.min.format('HH:mm');\n    this.intervals = [];\n  }\n\n  /**\n   * addSpentTime just adding new task item into Time Slot\n   * @param taskId - must be unique id\n   * @param millisecondsSpent - timestamp in milliseconds, will be convertet into minutes\n   */\n  addSpentTime(taskId, millisecondsSpent) {\n    this[taskId] = Number(millisecondsSpent / MILLISECONDS_IN_MINUTE).toFixed(\n      2\n    );\n  }\n}\n\n/**\n * buildData function is help to build required data array for ReCharts feature.\n * @param tasks - array of tasks with props {id,name,start,end}\n * @param overlayMode - Boolean.\n * @returns {Object} with data and bars arrays\n */\nexport const buildData = (tasks = [], overlayMode = false) => {\n  let returnData = {\n    data: [],\n    bars: [],\n  };\n\n  // 1. Build basic data array with 24 items for each hour\n  for (let hours = 0; hours < HOURS_IN_DAY; hours++) {\n    returnData.data.push(new TimeSlot({ hours }));\n  }\n\n  // 2. Loop trough the task array\n  tasks.forEach(({ id, name, start, end }) => {\n    // 1. SMALL VALIDATION\n    // 1.1 - Skip Current Task if there is no required task props\n    if (!id || !name || !start || !end) {\n      return;\n    }\n    const startedAt = moment(start);\n    const finishedAt = moment(end);\n\n    // 1.2 - Skip Current Task if there is invalid datetime\n    if (!startedAt.isValid() || !finishedAt.isValid()) {\n      return;\n    }\n\n    // 2. PREPARE DATA\n    const startHour = startedAt.hours();\n    const finishHour = finishedAt.hours();\n    let spentHours = 1; //we will going trough the loop so it's important to have value more than 0\n\n    // Define correct number of hours which are related to the current Task\n    if (finishHour > startHour) {\n      spentHours += finishHour - startHour;\n    } else if (finishHour < startHour) {\n      // Here we calculate hours for task which are going trough the middle of the night\n      // (Task was started today and will be finished technically tomorrow)\n      spentHours += HOURS_IN_DAY + finishHour - startHour;\n    }\n\n    // 3. LOOP THROUGH THE TASK SPENT HOURS\n    for (let hour = 0; hour < spentHours; hour++) {\n      // We have to select correct Time Slot by targetHour to make sure put values into correspond Time Slot\n      // We also need to cover case when index increase up to 24  => reset to 0\n      let targetHour = startHour + hour;\n      targetHour -= targetHour >= HOURS_IN_DAY ? HOURS_IN_DAY : 0;\n\n      const taskSlotName = moment\n        .utc()\n        .hours(targetHour)\n        .minutes(0)\n        .format('HH:mm');\n\n      let slot = returnData.data.find(slot => slot.name === taskSlotName);\n\n      // Skip Current Task if TimeSlot is not found. Should never happen\n      if (!slot) {\n        return;\n      }\n\n      // Let's prepare datetime values for comparing.\n      // It's important to use UTC datetime\n      const min = slot.min;\n      const max = slot.max;\n\n      let start = moment(slot.min).set({\n          hour: startedAt.hours(),\n          minute: startedAt.minutes(),\n          second: startedAt.seconds(),\n          milliseconds: startedAt.milliseconds(),\n        }),\n        finish = moment(slot.min).set({\n          hour: finishedAt.hours(),\n          minute: finishedAt.minutes(),\n          second: finishedAt.seconds(),\n          milliseconds: finishedAt.milliseconds(),\n        });\n\n      // We have to limit start and finish values by current time slot\n      start = start <= min || start > max ? min : start;\n      finish = finish <= min || finish > max ? max : finish;\n\n      // Count difference in milliseconds\n      const spentMilliseconds = finish.valueOf() - start.valueOf();\n\n      // 3. If it's DEFAULT mode, we have to care about task overlays, if there is one of them we will remove Overlay Task from an array\n      if (!overlayMode) {\n        let isOverlay = false;\n        slot.intervals.forEach(interval => {\n          const a =\n            start.valueOf() >= interval.start &&\n            start.valueOf() <= interval.finish;\n          const b =\n            finish.valueOf() >= interval.start &&\n            finish.valueOf() <= interval.finish;\n          if (a || b) {\n            isOverlay = true;\n          }\n        });\n\n        // Skip Current Task because it's overlay on the timeline of another Task\n        if (isOverlay) {\n          return;\n        }\n\n        slot.intervals.push({\n          id,\n          start: start.valueOf(),\n          finish: finish.valueOf(),\n          spentMilliseconds,\n        });\n      }\n\n      // Finally, add task item\n      slot.addSpentTime(id, spentMilliseconds);\n    }\n\n    // Add task item into bar array. If it's DEFAULT mode we would like to show all TimeSlot spent time in one Bar\n    returnData.bars.push(new BarItem({ id, stackId: !overlayMode }));\n  });\n\n  return returnData;\n};\n\nexport default buildData;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { generateTasks } from '../../actions/tasks';\nimport buildData from '../../utilities/buildData';\nimport {\n  BarChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      overlayMode: false,\n      data: [],\n      bars: [],\n    };\n  }\n\n  componentDidMount() {\n    this.rebuildData();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.tasks !== this.props.tasks) {\n      this.rebuildData();\n    }\n  }\n\n  toggleOverlayMode() {\n    const { overlayMode } = this.state;\n    this.setState({ overlayMode: !overlayMode }, () => this.rebuildData());\n  }\n\n  rebuildData() {\n    const { overlayMode } = this.state;\n    const { tasks } = this.props;\n    const { data, bars } = buildData(tasks, overlayMode);\n    this.setState({\n      data,\n      bars,\n    });\n  }\n\n  render() {\n    const { overlayMode, data, bars } = this.state;\n    const { generateTasks } = this.props;\n\n    return (\n      <div ref={this.rootEl}>\n        <ResponsiveContainer width=\"100%\" height={600}>\n          <BarChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" domain={[0, 60]} />\n            <YAxis />\n            <Tooltip />\n            <Legend legendType=\"circle\" />\n            {bars.map(({ id, stackId, fill }) => (\n              <Bar key={id} dataKey={id} stackId={stackId} fill={fill} />\n            ))}\n          </BarChart>\n        </ResponsiveContainer>\n        <div>\n          <Button style={{ float: 'right' }} onClick={() => generateTasks()}>\n            GENERATE\n          </Button>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={overlayMode}\n                onChange={() => this.toggleOverlayMode()}\n              />\n            }\n            label={'OVERLAY mode'}\n          />\n          <div style={{ maxWidth: '700px' }}>\n            <p>\n              Трекер разработан на основе предпосылки что в определенный момент\n              времени может выполняться только 1 задача. По этому, в построенном\n              графике не может быть более 60 минут в 1 часе.\n            </p>\n            <p>\n              В тоже время, генератор случайных задач не учитывает временные\n              наложения задач между собой при построении массива. Это может\n              создать ситуацию при которой 2 задачи выполняються одновременно.\n            </p>\n            <p>\n              В этом случае задача которая накладываеться на другую задачу не\n              будет показана на графике, для того что бы увидеть такую задачу\n              нужно переключиться в \"overlayMode\" мод.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks.list,\n});\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      generateTasks,\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Index);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TasksLog from '../TasksLog';\nimport TasksChart from '../TasksChart';\n\nclass Index extends React.Component {\n  handleChangeTab(event, value) {\n    this.props.history.push(value);\n  }\n\n  render() {\n    const {\n      history: {\n        location: { pathname, hash },\n      },\n    } = this.props;\n\n    // define available tab routes\n    const tabRoutes = {\n      log: '/',\n      chart: '/#chart',\n    };\n\n    // Catch invalid tab routes\n    const currentTab =\n      pathname + hash === tabRoutes.chart ? tabRoutes.chart : tabRoutes.log;\n\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Tabs\n            value={currentTab}\n            onChange={(event, value) => this.handleChangeTab(event, value)}\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Tasks Log\" value={tabRoutes.log} fullWidth />\n            <Tab label=\"Tasks chart\" value={tabRoutes.chart} fullWidth />\n          </Tabs>\n        </AppBar>\n        {currentTab === tabRoutes.log && <TasksLog />}\n        {currentTab === tabRoutes.chart && <TasksChart />}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Index);\n","import React from 'react';\nimport TaskForm from '../../components/TaskForm';\nimport TaskTabs from '../../components/TaskTabs';\n\nexport default () => (\n  <div>\n    <TaskForm />\n    <TaskTabs />\n  </div>\n);\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport default () => (\n  <div>\n    <Typography variant=\"h4\">Task not found</Typography>\n  </div>\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport TextField from '@material-ui/core/TextField';\nimport TaskNotFound from '../TaskNotFound';\nimport Time from '../Time';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    display: 'block',\n    width: 200,\n  },\n});\n\nexport const Index = ({\n  classes,\n  tasks,\n  match: {\n    params: { taskId },\n  },\n}) => {\n  const task = tasks.find(t => t.id === parseInt(taskId));\n  if (!task) {\n    return <TaskNotFound />;\n  }\n  const { id, name, start, end } = task;\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Task Info</Typography>\n      <form className={classes.container}>\n        <FormControl className={classes.formControl}>\n          <TextField id=\"id\" label=\"ID\" type=\"text\" value={id} disabled />\n        </FormControl>\n\n        <FormControl className={classes.formControl}>\n          <FormLabel>Name</FormLabel>\n          <TextField id=\"name\" label=\"Name\" type=\"text\" value={name} />\n        </FormControl>\n\n        <FormControl className={classes.formControl}>\n          <FormLabel>\n            <span>Started At: </span>\n            <Time datetime={start} />\n          </FormLabel>\n          <TextField\n            id=\"start\"\n            label=\"TimeStart\"\n            type=\"text\"\n            value={task.start}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </FormControl>\n\n        <FormControl className={classes.formControl}>\n          <FormLabel>\n            <span>Finished At: </span>\n            <Time datetime={end} />\n          </FormLabel>\n          <TextField\n            id=\"end\"\n            label=\"TimeEnd\"\n            type=\"text\"\n            value={task.end}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </FormControl>\n\n        <FormControl className={classes.formControl}>\n          <FormLabel>\n            <span>Spent: </span>\n            <Time datetimeDiff={{ start, end }} />\n          </FormLabel>\n        </FormControl>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  tasks: state.tasks.list,\n});\nexport default withStyles(styles)(connect(mapStateToProps)(Index));\n","import React from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Task from '../../components/TaskInfo';\nimport TaskNotFound from '../../components/TaskNotFound';\n\nexport default ({ match }) => {\n  return (\n    <div>\n      <Button component={Link} to=\"/\" color=\"secondary\">\n        Homepage\n      </Button>\n      <Switch>\n        <Route exact path={`${match.url}/:taskId`} component={Task} />\n        <Route component={TaskNotFound} />\n      </Switch>\n    </div>\n  );\n};\n","import { Route, Switch } from 'react-router-dom';\nimport React from 'react';\nimport HomePage from './HomePage';\nimport TaskPage from './TaskPage';\n\nexport default () => (\n  <div>\n    <Switch>\n      <Route path=\"/\" exact component={HomePage} />\n      <Route path=\"/tasks\" component={TaskPage} />\n      <Route render={() => <div>Page Not Found</div>} />\n    </Switch>\n  </div>\n);\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport cyan from '@material-ui/core/colors/cyan';\nimport indigo from '@material-ui/core/colors/indigo';\n\nconst white = '#FFFFFF';\nconst milWhite = '#fdfdfd';\nconst lightblue = '#eaf6ff';\n\nexport default createMuiTheme({\n  palette: {\n    primary: indigo,\n  },\n  overrides: {\n    MuiInput: {\n      underline: {\n        color: indigo['900'],\n      },\n    },\n    MuiButton: {\n      text: {\n        backgroundColor: white,\n        borderRadius: 5,\n        boxShadow:\n          '0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12)',\n        color: indigo['900'],\n\n        '&:hover': {\n          backgroundColor: indigo['900'],\n          color: white,\n        },\n      },\n    },\n    MuiAppBar: {\n      root: {\n        backgroundColor: cyan['600'],\n      },\n    },\n    MuiTableHead: {\n      root: {\n        backgroundColor: milWhite,\n      },\n    },\n    MuiTableBody: {\n      root: {\n        backgroundColor: lightblue,\n      },\n    },\n    MuiTableCell: {\n      root: {\n        color: indigo['900'],\n      },\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { closeModal } from '../../actions/modal';\nimport { withStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  modal: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n  closeButton: {\n    float: 'right',\n  },\n});\n\nconst Index = ({ classes, isOpen, title, message, closeModal }) => {\n  return (\n    <div>\n      <Modal open={isOpen} onClose={() => closeModal()}>\n        <div className={classes.modal}>\n          <Typography variant=\"h6\" id=\"modal-title\" color={'secondary'}>\n            {title}\n          </Typography>\n          <Typography variant=\"subtitle1\">{message}</Typography>\n          <Button className={classes.closeButton} onClick={() => closeModal()}>\n            Close\n          </Button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isOpen: state.modal.isOpen,\n  title: state.modal.title,\n  message: state.modal.message,\n});\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      closeModal,\n    },\n    dispatch\n  );\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Index)\n);\n","import React from 'react';\nimport AppRoutes from './routes';\nimport Grid from '@material-ui/core/Grid';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\nimport ModalMessage from './components/ModalMessage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <Grid container justify={'center'}>\n          <Grid item xs={10}>\n            <ModalMessage />\n            <AppRoutes />\n          </Grid>\n        </Grid>\n      </MuiThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}